// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// MyDomainsHandlerFunc turns a function with the right signature into a my domains handler
type MyDomainsHandlerFunc func(MyDomainsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MyDomainsHandlerFunc) Handle(params MyDomainsParams) middleware.Responder {
	return fn(params)
}

// MyDomainsHandler interface for that can handle valid my domains params
type MyDomainsHandler interface {
	Handle(MyDomainsParams) middleware.Responder
}

// NewMyDomains creates a new http.Handler for the my domains operation
func NewMyDomains(ctx *middleware.Context, handler MyDomainsHandler) *MyDomains {
	return &MyDomains{Context: ctx, Handler: handler}
}

/* MyDomains swagger:route GET /my/domains myDomains

MyDomains my domains API

*/
type MyDomains struct {
	Context *middleware.Context
	Handler MyDomainsHandler
}

func (o *MyDomains) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMyDomainsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// UploadWebPostOKCode is the HTTP code returned for type UploadWebPostOK
const UploadWebPostOKCode int = 200

/*UploadWebPostOK New website created.

swagger:response uploadWebPostOK
*/
type UploadWebPostOK struct {

	/*
	  In: Body
	*/
	Payload *models.Websites `json:"body,omitempty"`
}

// NewUploadWebPostOK creates UploadWebPostOK with default headers values
func NewUploadWebPostOK() *UploadWebPostOK {

	return &UploadWebPostOK{}
}

// WithPayload adds the payload to the upload web post o k response
func (o *UploadWebPostOK) WithPayload(payload *models.Websites) *UploadWebPostOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload web post o k response
func (o *UploadWebPostOK) SetPayload(payload *models.Websites) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadWebPostOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadWebPostBadRequestCode is the HTTP code returned for type UploadWebPostBadRequest
const UploadWebPostBadRequestCode int = 400

/*UploadWebPostBadRequest Bad request.

swagger:response uploadWebPostBadRequest
*/
type UploadWebPostBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadWebPostBadRequest creates UploadWebPostBadRequest with default headers values
func NewUploadWebPostBadRequest() *UploadWebPostBadRequest {

	return &UploadWebPostBadRequest{}
}

// WithPayload adds the payload to the upload web post bad request response
func (o *UploadWebPostBadRequest) WithPayload(payload *models.Error) *UploadWebPostBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload web post bad request response
func (o *UploadWebPostBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadWebPostBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadWebPostUnprocessableEntityCode is the HTTP code returned for type UploadWebPostUnprocessableEntity
const UploadWebPostUnprocessableEntityCode int = 422

/*UploadWebPostUnprocessableEntity Unprocessable Entity - syntax is correct, but the server was unable to process the contained instructions.

swagger:response uploadWebPostUnprocessableEntity
*/
type UploadWebPostUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadWebPostUnprocessableEntity creates UploadWebPostUnprocessableEntity with default headers values
func NewUploadWebPostUnprocessableEntity() *UploadWebPostUnprocessableEntity {

	return &UploadWebPostUnprocessableEntity{}
}

// WithPayload adds the payload to the upload web post unprocessable entity response
func (o *UploadWebPostUnprocessableEntity) WithPayload(payload *models.Error) *UploadWebPostUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload web post unprocessable entity response
func (o *UploadWebPostUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadWebPostUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadWebPostInternalServerErrorCode is the HTTP code returned for type UploadWebPostInternalServerError
const UploadWebPostInternalServerErrorCode int = 500

/*UploadWebPostInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response uploadWebPostInternalServerError
*/
type UploadWebPostInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUploadWebPostInternalServerError creates UploadWebPostInternalServerError with default headers values
func NewUploadWebPostInternalServerError() *UploadWebPostInternalServerError {

	return &UploadWebPostInternalServerError{}
}

// WithPayload adds the payload to the upload web post internal server error response
func (o *UploadWebPostInternalServerError) WithPayload(payload *models.Error) *UploadWebPostInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload web post internal server error response
func (o *UploadWebPostInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadWebPostInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

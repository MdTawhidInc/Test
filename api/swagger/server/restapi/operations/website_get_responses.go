// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/thyra/api/swagger/server/models"
)

// WebsiteGetOKCode is the HTTP code returned for type WebsiteGetOK
const WebsiteGetOKCode int = 200

/*WebsiteGetOK Resource retrieved.

swagger:response websiteGetOK
*/
type WebsiteGetOK struct {
}

// NewWebsiteGetOK creates WebsiteGetOK with default headers values
func NewWebsiteGetOK() *WebsiteGetOK {

	return &WebsiteGetOK{}
}

// WriteResponse to the client
func (o *WebsiteGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// WebsiteGetBadRequestCode is the HTTP code returned for type WebsiteGetBadRequest
const WebsiteGetBadRequestCode int = 400

/*WebsiteGetBadRequest Bad request.

swagger:response websiteGetBadRequest
*/
type WebsiteGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWebsiteGetBadRequest creates WebsiteGetBadRequest with default headers values
func NewWebsiteGetBadRequest() *WebsiteGetBadRequest {

	return &WebsiteGetBadRequest{}
}

// WithPayload adds the payload to the website get bad request response
func (o *WebsiteGetBadRequest) WithPayload(payload *models.Error) *WebsiteGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website get bad request response
func (o *WebsiteGetBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WebsiteGetNotFoundCode is the HTTP code returned for type WebsiteGetNotFound
const WebsiteGetNotFoundCode int = 404

/*WebsiteGetNotFound Resource not found.

swagger:response websiteGetNotFound
*/
type WebsiteGetNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWebsiteGetNotFound creates WebsiteGetNotFound with default headers values
func NewWebsiteGetNotFound() *WebsiteGetNotFound {

	return &WebsiteGetNotFound{}
}

// WithPayload adds the payload to the website get not found response
func (o *WebsiteGetNotFound) WithPayload(payload *models.Error) *WebsiteGetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website get not found response
func (o *WebsiteGetNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteGetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WebsiteGetInternalServerErrorCode is the HTTP code returned for type WebsiteGetInternalServerError
const WebsiteGetInternalServerErrorCode int = 500

/*WebsiteGetInternalServerError Internal Server Error - The server has encountered a situation it does not know how to handle.

swagger:response websiteGetInternalServerError
*/
type WebsiteGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWebsiteGetInternalServerError creates WebsiteGetInternalServerError with default headers values
func NewWebsiteGetInternalServerError() *WebsiteGetInternalServerError {

	return &WebsiteGetInternalServerError{}
}

// WithPayload adds the payload to the website get internal server error response
func (o *WebsiteGetInternalServerError) WithPayload(payload *models.Error) *WebsiteGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the website get internal server error response
func (o *WebsiteGetInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebsiteGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WebsiteGetHandlerFunc turns a function with the right signature into a website get handler
type WebsiteGetHandlerFunc func(WebsiteGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WebsiteGetHandlerFunc) Handle(params WebsiteGetParams) middleware.Responder {
	return fn(params)
}

// WebsiteGetHandler interface for that can handle valid website get params
type WebsiteGetHandler interface {
	Handle(WebsiteGetParams) middleware.Responder
}

// NewWebsiteGet creates a new http.Handler for the website get operation
func NewWebsiteGet(ctx *middleware.Context, handler WebsiteGetHandler) *WebsiteGet {
	return &WebsiteGet{Context: ctx, Handler: handler}
}

/* WebsiteGet swagger:route GET /website/{address}/{resource} websiteGet

WebsiteGet website get API

*/
type WebsiteGet struct {
	Context *middleware.Context
	Handler WebsiteGetHandler
}

func (o *WebsiteGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewWebsiteGetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
